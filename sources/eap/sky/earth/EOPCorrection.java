// Copyright 2012 Edward Alan Pier
//
// This file is part of eap.sky
// 
// eap.sky is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// eap.sky is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with eap.sky.  If not, see <http://www.gnu.org/licenses/>.

package eap.sky.earth;

import eap.sky.time.*;

import java.io.*;

/**************************************************************************
* Modeled diurnal and semidirnal corrections to earth orientation parameters
* due to tidal effects.
* The UT1 and polar motion data tabulated by the IERS have had variations
* on a timescale of a day or less removed. In fact the these diurnal
* and semi-diurnal effects are subtracted before the raw data are delivered
* to the IERS, in order to avoid systematic affects when the data are
* combined. There are two types of effects. The first is due to ocean
* tides which can transfer angluar momentum to or from the solid Earth,
* and can change the Earth's moment of intertia. The second effect comes
* from the fact that by convention, the components of nutation with
* periods less than two days are not included in the definition of the
* Celestial Intermediate Pole. Therefore they must be accounted for
* by the corresponding polar motion.
* <p>
* This class provides a general framework for implementing such corrections.
* It also has a number of static instances of this class. The definitive
* one to use is {@link #IERS2003}. The others are useful mostly for
* comparison.
* @see EOPTable
**************************************************************************/
public abstract class EOPCorrection implements Serializable {

/*************************************************************************
* The tidal correction from the original
* <a href="http://maia.usno.navy.mil/iers-gaz13">
* 1997 version of IERS Gazette #13</a>. It is a translation of the
* attached FORTRAN "RAY" subroutine.
* This subroutine has been superceded by the 2003 IERS conventions.
* @see #IERS2003
*************************************************************************/
public static final EOPCorrection IERS1996 = initOcean1996();

/*************************************************************************
* The tidal correction from the
* <a href="ftp://hpiers.obspm.fr/eop-pc/models/interp.readme">
* revised version of IERS Gazette #13</a>, and intended to accompany the
* 2003 IERS conventions. It is a translation of the FORTRAN subroutine
* <a href="ftp://hpiers.obspm.fr/eop-pc/models/interp.f">
* PMUT1_OCEANS</a>. Note that this does not include the diurnal components
* of nutation.
* @see #Nutation2003
* @see #IERS2003
*************************************************************************/
public static final EOPCorrection Ocean2003 = initOcean2003();

/*************************************************************************
* This is the diurnal nutation correction from the
* <a href="ftp://hpiers.obspm.fr/eop-pc/models/interp.readme">
* revised version of IERS Gazette #13</a>, and intended to accompany the
* 2003 IERS conventions. It is a translation of the FORTRAN subroutine
* <a href="ftp://hpiers.obspm.fr/eop-pc/models/interp.f">
* PM_GRAVI</a>. Note that this does not include the much larger tidal
* effects, and so should not be used by itself.
* @see #Ocean2003
* @see #IERS2003
*************************************************************************/
public static final EOPCorrection Nutation2003 = initNutation2003();

/*************************************************************************
* This combines the tidal and nutation corrections from the
* <a href="ftp://hpiers.obspm.fr/eop-pc/models/interp.readme">
* revised version of IERS Gazette #13</a>, and intended to accompany the
* 2003 IERS conventions. It is a merger of the FORTRAN subroutines
* <a href="ftp://hpiers.obspm.fr/eop-pc/models/interp.f">
* PMUT1_OCEANS and PM_GRAVI</a>.
* This is
*************************************************************************/
public static final EOPCorrection IERS2003 = initIERS2003();

/***************************************************************************
* This is an early coding of the same 71 term
* {@link #Ocean2003}. It is a translation of the FORTRAN subroutine
* <a href="http://maia.usno.navy.mil/conv2000/chapter8/ortho_eop.f">
* ortho_eop</a>, which was coded by Richard Eanes. This code produces
* nearly the same results as {@link #Ocean2003}. However, it uses
* a somewhat different formalism, so the results are not identical.
* The main difference is a lag of a few
* Note that this correction does not include the adjustment for
* the diurnal components of nutation.
***************************************************************************/
public static final EOPCorrection Eanes2003 = new Eanes2003EOPCorrection();

/**************************************************************************
* Create a new correction.
**************************************************************************/
protected EOPCorrection() {}

/**************************************************************************
* Apply the corrections to a set of Earth orientation parameters.
**************************************************************************/
public abstract void correct(EOP eop);

/**************************************************************************
* Applies a set of corrections.
* @param delta_t The correction to UT1 in seconds.
* @param delta_x The correction to polar motion x in arc seconds
* @param delta_y The correction to polar motion y in arc seconds
**************************************************************************/
protected static void apply(EOP eop, double delta_t,
                            double delta_x, double delta_y) {

    /*******************************
    * copy out the ancilliary data *
    *******************************/
    PolarMotionParameters polar = eop.getPolarMotionParameters();
    PrecessionCorrection  prec  = eop.getPrecessionCorrection();
    TidalArguments        args  = eop.getTidalArguments();
    double time_error = eop.getTimeError();

    /*********************************
    * adjust the polar motion values *
    *********************************/
    polar = new PolarMotionParameters(polar.getX() + delta_x,
                                      polar.getY() + delta_y,
                                      polar.getXError(), polar.getYError());

    /******************
    * update the time *
    ******************/
    eop.increment(delta_t);

    /********************************************************
    * reset the ancilliary data which was wiped out
    * by the time increment
    ********************************************************/
    eop.setTime(eop.getMilliseconds(), eop.getNanoseconds(),
                time_error, polar, prec, args);

} // end of apply method

/***************************************************************************
* Create {@link @IERS1996}
***************************************************************************/
private static EOPCorrection initOcean1996() {

    int[][] arg_weight = {{-1, 0,-2, 0,-2, 0,0,0,0,0,0,0,0,0, 1}, // Q1
                          { 0, 0,-2, 0,-2, 0,0,0,0,0,0,0,0,0, 1}, // O1
                          { 0, 0,-2, 2,-2, 0,0,0,0,0,0,0,0,0, 1}, // P1
                          { 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0, 1}, // K1
                          {-1, 0,-2, 0,-2, 0,0,0,0,0,0,0,0,0, 2}, // N2
                          { 0, 0,-2, 0,-2, 0,0,0,0,0,0,0,0,0, 2}, // M2
                          { 0, 0,-2, 2,-2, 0,0,0,0,0,0,0,0,0, 2}, // S2
                          { 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0, 2}};// K2

    double[] sin_phase = {-1.0, -1.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0};
    double[] cos_phase = { 0.0,  0.0,  0.0, 0.0, 1.0, 1.0, 1.0, 1.0};

    double[] x_sin_weight = {-0.026, -0.133, -0.050, -0.152,
                            -0.057, -0.330, -0.145, -0.036};

    double[] x_cos_weight = { 0.006,  0.049,  0.025,  0.078,
                            -0.013, -0.028,  0.064,  0.017};


    double[] y_sin_weight = {-0.006, -0.049, -0.025, -0.078,
                            0.011,  0.037,  0.059,  0.018};

    double[] y_cos_weight = {-0.026, -0.133, -0.050, -0.152,
                            0.033,  0.196,  0.087,  0.022};


    double[] t_sin_weight = { 0.0245,  0.1210,  0.0286,  0.0864,
                            -0.0380, -0.1617, -0.0759, -0.0196};

    double[] t_cos_weight = { 0.0503, 0.1605,  0.0516,  0.1771,
                            -0.0154,-0.0720, -0.0004, -0.0038};
                            
    /*****************************
    * rescale the original units *
    *****************************/
    for(int i=0; i< x_sin_weight.length; ++i) {
        x_sin_weight[i] *= 1e-3;
        x_cos_weight[i] *= 1e-3;
        y_sin_weight[i] *= 1e-3;
        y_cos_weight[i] *= 1e-3;
        t_sin_weight[i] *= 1e-4;
        t_cos_weight[i] *= 1e-4;
    }

    return new ExpansionEOPCorrection(arg_weight,
                                        sin_phase,    cos_phase,
                                      x_sin_weight, x_cos_weight,
                                      y_sin_weight, y_cos_weight,
                                      t_sin_weight, t_cos_weight);

} // end of initOcean1996 method

/***********************************************************************
* Creates {@link #Ocean2003}
***********************************************************************/
private static EOPCorrection initOcean2003() {

    int[][] arg_weight={{-1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-2, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        {-2, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2,-2,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2,-2,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-2, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0,-2, 0,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 0,-2, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0,-1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 2,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0,-1, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0, 1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 1, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2,-2, 2,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0, 0, 2, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 2, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 2, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2, 0, 2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2, 0, 1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 2, 0, 2,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 2, 0, 1,0,0,0,0,0,0,0,0,0, 1},
                        {-3, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-2, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 1,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1,-1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 1,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-2, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0,-1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0,-1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0, 1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 2, 0, 2,0,0,0,0,0,0,0,0,0, 2}};

    double[] x_sin_weight = {  -0.05,   0.06,   0.30,   0.08,   0.46,   1.19,
                                6.24,   0.24,   1.28,  -0.28,   9.22,  48.82,
                               -0.32,  -0.66,  -0.42,  -0.30,  -1.61,  -4.48,
                               -0.90,  -0.86,   1.54,  -0.29,  26.13,  -0.22,
                               -0.61,   1.54, -77.48, -10.52,   0.23,  -0.61,
                               -1.09,  -0.69,  -3.46,  -0.69,  -0.37,  -0.17,
                               -1.10,  -0.70,  -0.15,  -0.03,  -0.02,  -0.49,
                               -1.33,  -6.08,  -7.59,  -0.52,   0.47,   2.12,
                              -56.87,  -0.54, -11.01,  -0.51,   0.98,   1.13,
                               12.32,-330.15,  -1.01,   2.47,   9.40,  -2.35,
                               -1.04,  -8.51,-144.13,   1.19,   0.49, -38.48,
                              -11.44,  -1.24,  -1.77,  -0.77,  -0.33};

    double[] x_cos_weight = {   0.94,   0.64,   3.42,   0.78,   4.15,   4.96,
                               26.31,   0.94,   4.99,  -0.77,  25.06, 132.91,
                               -0.86,  -1.72,  -0.92,  -0.64,  -3.46,  -9.61,
                               -1.93,  -1.81,   3.03,  -0.58,  51.25,  -0.42,
                               -1.20,   3.00,-151.74, -20.56,   0.44,  -1.19,
                               -2.11,  -1.43,  -7.28,  -1.44,  -1.06,  -0.51,
                               -3.42,  -2.19,  -0.46,  -0.59,  -0.38,  -0.04,
                               -0.17,  -1.61,  -2.05,  -0.14,   0.11,   0.49,
                              -12.93,  -0.12,  -2.40,  -0.11,   0.11,   0.11,
                                1.00, -26.96,  -0.07,  -0.28,  -1.44,   0.37,
                                0.17,   3.50,  63.56,  -0.56,  -0.25,  19.14,
                                5.75,   0.63,   1.79,   0.78,   0.62};

    double[] y_sin_weight = {  -0.94,  -0.64,  -3.42,  -0.78,  -4.15,  -4.96,
                              -26.31,  -0.94,  -4.99,   0.77, -25.06,-132.90,
                                0.86,   1.72,   0.92,   0.64,   3.46,   9.61,
                                1.93,   1.81,  -3.03,   0.58, -51.25,   0.42,
                                1.20,  -3.00, 151.74,  20.56,  -0.44,   1.19,
                                2.11,   1.43,   7.28,   1.44,   1.06,   0.51,
                                3.42,   2.19,   0.46,   0.59,   0.38,   0.63,
                                1.53,   3.13,   3.44,   0.22,  -0.10,  -0.41,
                               11.15,   0.10,   1.89,   0.08,  -0.11,  -0.13,
                               -1.41,  37.58,   0.11,  -0.44,  -1.88,   0.47,
                                0.21,   3.29,  59.23,  -0.52,  -0.23,  17.72,
                                5.32,   0.58,   1.71,   0.75,   0.65};

    double[] y_cos_weight = {  -0.05,   0.06,   0.30,   0.08,   0.45,   1.19,
                                6.23,   0.24,   1.28,  -0.28,   9.22,  48.82,
                               -0.32,  -0.66,  -0.42,  -0.30,  -1.61,  -4.48,
                               -0.90,  -0.86,   1.54,  -0.29,  26.13,  -0.22,
                               -0.61,   1.54, -77.48, -10.52,   0.23,  -0.61,
                               -1.09,  -0.69,  -3.46,  -0.69,  -0.37,  -0.17,
                               -1.09,  -0.70,  -0.15,  -0.03,  -0.02,   0.24,
                                0.68,   3.35,   4.23,   0.29,  -0.27,  -1.23,
                               32.88,   0.31,   6.41,   0.30,  -0.58,  -0.67,
                               -7.31, 195.92,   0.60,  -1.48,  -5.65,   1.41,
                                0.62,   5.11,  86.56,  -0.72,  -0.29,  23.11,
                                6.87,   0.75,   1.04,   0.45,   0.19};

    double[] t_sin_weight = {  0.396,  0.195,  1.034,  0.224,  1.187,  0.966,
                               5.118,  0.172,  0.911, -0.093,  3.025, 16.020,
                              -0.103, -0.194, -0.083, -0.057, -0.308, -0.856,
                              -0.172, -0.161,  0.315, -0.062,  5.512, -0.047,
                              -0.134,  0.348,-17.620, -2.392,  0.052, -0.144,
                              -0.267, -0.288, -1.610, -0.320, -0.407, -0.213,
                              -1.436, -0.921, -0.193, -0.396, -0.253, -0.089,
                              -0.224, -0.637, -0.745, -0.049,  0.033,  0.141,
                              -3.795, -0.035, -0.698, -0.032,  0.050,  0.056,
                               0.605,-16.195, -0.049,  0.111,  0.425, -0.106,
                              -0.047, -0.437, -7.547,  0.064,  0.027, -2.104,
                              -0.627, -0.068, -0.146, -0.064, -0.049};

    double[] t_cos_weight = { -0.078, -0.059, -0.314, -0.073, -0.387, -0.474,
                              -2.499, -0.090, -0.475,  0.070, -2.280,-12.069,
                               0.078,  0.154,  0.074,  0.050,  0.271,  0.751,
                               0.151,  0.137, -0.189,  0.035, -3.095,  0.025,
                               0.070, -0.171,  8.548,  1.159, -0.025,  0.065,
                               0.111,  0.043,  0.187,  0.037, -0.005, -0.005,
                              -0.037, -0.023, -0.005, -0.024, -0.015, -0.011,
                              -0.032, -0.177, -0.222, -0.015,  0.013,  0.058,
                              -1.556, -0.015, -0.298, -0.014,  0.022,  0.025,
                               0.266, -7.140, -0.021,  0.034,  0.117, -0.029,
                              -0.013, -0.019, -0.159,  0.000, -0.001,  0.041,
                               0.015,  0.002,  0.037,  0.017,  0.018};

    double[] sin_phase = new double[x_sin_weight.length];
    double[] cos_phase = new double[sin_phase.length];
    for(int i=0; i< sin_phase.length; ++i) {
        sin_phase[i] = 0.0;
        cos_phase[i] = 1.0;
    }


    /*****************************
    * rescale the original units *
    *****************************/
    for(int i=0; i< x_sin_weight.length; ++i) {
        x_sin_weight[i] *= 1e-6;
        x_cos_weight[i] *= 1e-6;
        y_sin_weight[i] *= 1e-6;
        y_cos_weight[i] *= 1e-6;
        t_sin_weight[i] *= 1e-6;
        t_cos_weight[i] *= 1e-6;
    }
    return new ExpansionEOPCorrection(arg_weight,
                                        sin_phase,    cos_phase,
                                      x_sin_weight, x_cos_weight,
                                      y_sin_weight, y_cos_weight,
                                      t_sin_weight, t_cos_weight);

} // end of initOcean2003Correction method

/***********************************************************************
* Creates {@link #Nutation2003}
***********************************************************************/
private static EOPCorrection initNutation2003() {

    int[][] arg_weight={{-1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0,  1},
                        {-1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0,  1},
                        { 1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0,  1},
                        { 0, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0,  1},
                        { 0, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0,  1},
                        {-1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,  1},
                        { 0, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0,  1},
                        { 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,  1},
                        { 0, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0,  1},
                        { 1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,  1}};

    double[] x_sin_weight = {   -.44,  -2.31,   -.44,  -2.14, -11.36,    .84,
                               -4.76,  14.27,   1.93,    .76,};

    double[] x_cos_weight = {    .25,   1.32,    .25,   1.23,   6.52,   -.48,
                                2.73,  -8.19,  -1.11,   -.43,};

    double[] y_sin_weight = {   -.25,  -1.32,   -.25,  -1.23,  -6.52,    .48,
                               -2.73,   8.19,   1.11,    .43,};

    double[] y_cos_weight = {   -.44,  -2.31,   -.44,  -2.14, -11.36,    .84,
                               -4.76,  14.27,   1.93,    .76,};

    double[] t_sin_weight = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    double[] t_cos_weight = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

    double[] sin_phase = new double[x_sin_weight.length];
    double[] cos_phase = new double[sin_phase.length];
    for(int i=0; i< sin_phase.length; ++i) {
        sin_phase[i] = 0.0;
        cos_phase[i] = 1.0;
    }


    /*****************************
    * rescale the original units *
    *****************************/
    for(int i=0; i< x_sin_weight.length; ++i) {
        x_sin_weight[i] *= 1e-6;
        x_cos_weight[i] *= 1e-6;
        y_sin_weight[i] *= 1e-6;
        y_cos_weight[i] *= 1e-6;
        t_sin_weight[i] *= 1e-6;
        t_cos_weight[i] *= 1e-6;
    }

    return new ExpansionEOPCorrection(arg_weight,
                                    sin_phase,    cos_phase,
                                x_sin_weight, x_cos_weight,
                                y_sin_weight, y_cos_weight,
                                t_sin_weight, t_cos_weight);

} // end of initNutation2003 method


/***********************************************************************
* Initialized {@link #IERS2003}
***********************************************************************/
private static EOPCorrection initIERS2003() {

    int[][] arg_weight={{-1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-2, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        {-2, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2,-2,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2,-2,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-2, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0,-2, 0,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 0,-2, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0,-1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 2,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0,-1, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0, 1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 1, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2,-2, 2,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0, 0, 2, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 2, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 2, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2, 0, 2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2, 0, 1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 2, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 2, 0, 2,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 2, 0, 1,0,0,0,0,0,0,0,0,0, 1},
                        {-3, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-2, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 1,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1,-1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 1,-2,-2,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-2, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0,-1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 1,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 2},
                        {-1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0,-1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 1,-2, 2,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0, 1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 0, 0,-2,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 2},
                        { 1, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 2},
                        { 0, 0, 2, 0, 2,0,0,0,0,0,0,0,0,0, 2},

                        {-1, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0,-2,-2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 0,-2,0,0,0,0,0,0,0,0,0, 1},
                        {-1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0,-2, 2,-2,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1},
                        { 0, 0, 0, 0,-1,0,0,0,0,0,0,0,0,0, 1},
                        { 1, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0, 1}};

    double[] x_sin_weight = {  -0.05,   0.06,   0.30,   0.08,   0.46,   1.19,
                                6.24,   0.24,   1.28,  -0.28,   9.22,  48.82,
                               -0.32,  -0.66,  -0.42,  -0.30,  -1.61,  -4.48,
                               -0.90,  -0.86,   1.54,  -0.29,  26.13,  -0.22,
                               -0.61,   1.54, -77.48, -10.52,   0.23,  -0.61,
                               -1.09,  -0.69,  -3.46,  -0.69,  -0.37,  -0.17,
                               -1.10,  -0.70,  -0.15,  -0.03,  -0.02,  -0.49,
                               -1.33,  -6.08,  -7.59,  -0.52,   0.47,   2.12,
                              -56.87,  -0.54, -11.01,  -0.51,   0.98,   1.13,
                               12.32,-330.15,  -1.01,   2.47,   9.40,  -2.35,
                               -1.04,  -8.51,-144.13,   1.19,   0.49, -38.48,
                              -11.44,  -1.24,  -1.77,  -0.77,  -0.33,

                                -.44,  -2.31,   -.44,  -2.14, -11.36,    .84,
                               -4.76,  14.27,   1.93,    .76};






    double[] x_cos_weight = {   0.94,   0.64,   3.42,   0.78,   4.15,   4.96,
                               26.31,   0.94,   4.99,  -0.77,  25.06, 132.91,
                               -0.86,  -1.72,  -0.92,  -0.64,  -3.46,  -9.61,
                               -1.93,  -1.81,   3.03,  -0.58,  51.25,  -0.42,
                               -1.20,   3.00,-151.74, -20.56,   0.44,  -1.19,
                               -2.11,  -1.43,  -7.28,  -1.44,  -1.06,  -0.51,
                               -3.42,  -2.19,  -0.46,  -0.59,  -0.38,  -0.04,
                               -0.17,  -1.61,  -2.05,  -0.14,   0.11,   0.49,
                              -12.93,  -0.12,  -2.40,  -0.11,   0.11,   0.11,
                                1.00, -26.96,  -0.07,  -0.28,  -1.44,   0.37,
                                0.17,   3.50,  63.56,  -0.56,  -0.25,  19.14,
                                5.75,   0.63,   1.79,   0.78,   0.62,

                                 .25,   1.32,    .25,   1.23,   6.52,   -.48,
                                2.73,  -8.19,  -1.11,   -.43,};

    double[] y_sin_weight = {  -0.94,  -0.64,  -3.42,  -0.78,  -4.15,  -4.96,
                              -26.31,  -0.94,  -4.99,   0.77, -25.06,-132.90,
                                0.86,   1.72,   0.92,   0.64,   3.46,   9.61,
                                1.93,   1.81,  -3.03,   0.58, -51.25,   0.42,
                                1.20,  -3.00, 151.74,  20.56,  -0.44,   1.19,
                                2.11,   1.43,   7.28,   1.44,   1.06,   0.51,
                                3.42,   2.19,   0.46,   0.59,   0.38,   0.63,
                                1.53,   3.13,   3.44,   0.22,  -0.10,  -0.41,
                               11.15,   0.10,   1.89,   0.08,  -0.11,  -0.13,
                               -1.41,  37.58,   0.11,  -0.44,  -1.88,   0.47,
                                0.21,   3.29,  59.23,  -0.52,  -0.23,  17.72,
                                5.32,   0.58,   1.71,   0.75,   0.65,

                                -.25,  -1.32,   -.25,  -1.23,  -6.52,    .48,
                               -2.73,   8.19,   1.11,    .43};



    double[] y_cos_weight = {  -0.05,   0.06,   0.30,   0.08,   0.45,   1.19,
                                6.23,   0.24,   1.28,  -0.28,   9.22,  48.82,
                               -0.32,  -0.66,  -0.42,  -0.30,  -1.61,  -4.48,
                               -0.90,  -0.86,   1.54,  -0.29,  26.13,  -0.22,
                               -0.61,   1.54, -77.48, -10.52,   0.23,  -0.61,
                               -1.09,  -0.69,  -3.46,  -0.69,  -0.37,  -0.17,
                               -1.09,  -0.70,  -0.15,  -0.03,  -0.02,   0.24,
                                0.68,   3.35,   4.23,   0.29,  -0.27,  -1.23,
                               32.88,   0.31,   6.41,   0.30,  -0.58,  -0.67,
                               -7.31, 195.92,   0.60,  -1.48,  -5.65,   1.41,
                                0.62,   5.11,  86.56,  -0.72,  -0.29,  23.11,
                                6.87,   0.75,   1.04,   0.45,   0.19,

                                -.44,  -2.31,   -.44,  -2.14, -11.36,    .84,
                               -4.76,  14.27,   1.93,    .76};

    double[] t_sin_weight = {  0.396,  0.195,  1.034,  0.224,  1.187,  0.966,
                               5.118,  0.172,  0.911, -0.093,  3.025, 16.020,
                              -0.103, -0.194, -0.083, -0.057, -0.308, -0.856,
                              -0.172, -0.161,  0.315, -0.062,  5.512, -0.047,
                              -0.134,  0.348,-17.620, -2.392,  0.052, -0.144,
                              -0.267, -0.288, -1.610, -0.320, -0.407, -0.213,
                              -1.436, -0.921, -0.193, -0.396, -0.253, -0.089,
                              -0.224, -0.637, -0.745, -0.049,  0.033,  0.141,
                              -3.795, -0.035, -0.698, -0.032,  0.050,  0.056,
                               0.605,-16.195, -0.049,  0.111,  0.425, -0.106,
                              -0.047, -0.437, -7.547,  0.064,  0.027, -2.104,
                              -0.627, -0.068, -0.146, -0.064, -0.049,

                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0};

    double[] t_cos_weight = { -0.078, -0.059, -0.314, -0.073, -0.387, -0.474,
                              -2.499, -0.090, -0.475,  0.070, -2.280,-12.069,
                               0.078,  0.154,  0.074,  0.050,  0.271,  0.751,
                               0.151,  0.137, -0.189,  0.035, -3.095,  0.025,
                               0.070, -0.171,  8.548,  1.159, -0.025,  0.065,
                               0.111,  0.043,  0.187,  0.037, -0.005, -0.005,
                              -0.037, -0.023, -0.005, -0.024, -0.015, -0.011,
                              -0.032, -0.177, -0.222, -0.015,  0.013,  0.058,
                              -1.556, -0.015, -0.298, -0.014,  0.022,  0.025,
                               0.266, -7.140, -0.021,  0.034,  0.117, -0.029,
                              -0.013, -0.019, -0.159,  0.000, -0.001,  0.041,
                               0.015,  0.002,  0.037,  0.017,  0.018,

                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0};

    double[] sin_phase = new double[x_sin_weight.length];
    double[] cos_phase = new double[sin_phase.length];
    for(int i=0; i< sin_phase.length; ++i) {
        sin_phase[i] = 0.0;
        cos_phase[i] = 1.0;
    }


    /*****************************
    * rescale the original units *
    *****************************/
    for(int i=0; i< x_sin_weight.length; ++i) {
        x_sin_weight[i] *= 1e-6;
        x_cos_weight[i] *= 1e-6;
        y_sin_weight[i] *= 1e-6;
        y_cos_weight[i] *= 1e-6;
        t_sin_weight[i] *= 1e-6;
        t_cos_weight[i] *= 1e-6;
    }
    return new ExpansionEOPCorrection(arg_weight,
                                        sin_phase,    cos_phase,
                                      x_sin_weight, x_cos_weight,
                                      y_sin_weight, y_cos_weight,
                                      t_sin_weight, t_cos_weight);

} // end of initIERS2003 method

} // end of EOPCorrection class
